name: Deploy Backend

on:
  push:
    branches:
      - master

permissions:
  contents: write  # Needed to push Git tags

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mongo:
        image: mongo
        ports:
          - 27017:27017
    env:
      MONGODB_URL: mongodb://localhost:27017/task-manager-api
      JWT_SECRET: thisismysecret
      SENDGRID_API_KEY: SG.TEST
      EMAIL_ACCOUNT: test@test.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Run unit tests
        env:
          MONGODB_URL: mongodb://localhost:27017/task-manager-api
          JWT_SECRET: thisismysecret
        run: npm test
  
  build-and-tag-push:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Required to get full history and tags

      - name: Extract latest version + short SHA
        id: backend
        uses: ./.github/actions/extract-image-tag

      - name: Increase version
        id: increase_version
        run: |
            echo "Image tag: ${{ steps.backend.outputs.image_tag }}"
            IMAGE_TAG="${{ steps.backend.outputs.image_tag }}"
            VERSION_PART="${IMAGE_TAG%%-*}"  # Get part before the dash, e.g. 1.0.14
            echo "version is $VERSION_PART"
            IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION_PART"
            NEW_VERSION="v$MAJOR.$MINOR.$((PATCH + 1))"
            echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
            echo "New version: $NEW_VERSION"

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
  
      - name: Build and push Docker image
        run: |
          docker build -t "${{ secrets.DOCKER_USERNAME }}/task-manager-api:${{ steps.backend.outputs.image_tag }}" .
          docker push "${{ secrets.DOCKER_USERNAME }}/task-manager-api:${{ steps.backend.outputs.image_tag }}"
      - name: Push new Git tag (if it doesn't already exist)
        run: |
            git config user.name "github-actions"
            git config user.email "github-actions@github.com"

            TAG="${{ env.NEW_VERSION }}"
            if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "Tag $TAG already exists. Skipping tag creation."
            else
            git tag "$TAG"
            git push origin "$TAG"
            fi
            
